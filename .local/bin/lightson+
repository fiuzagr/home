#!/usr/bin/env bash
# lightson+

# Copyright (c) 2018 spinal.by at gmail com
# Copyright (c) 2014 devkral at web de
# url: https://github.com/devkral/lightsonplus

#based on
# Copyright (c) 2011 iye.cba at gmail com
# url: https://github.com/iye/lightsOn
# This script is licensed under GNU GPL version 2.0 or above

# Description: Bash script that prevents the screensaver and display power
# management (DPMS) from being activated while watching fullscreen videos
# on Firefox, Chrome and Chromium. Media players like mplayer, VLC and minitube
# can also be detected.
# One of {x, k, gnome-}screensaver must be installed.

# HOW TO USE:
# "./lightson+ -d 2 &" will check every 2 minutes if Mplayer, VLC, Firefox or
# Chromium are fullscreen and delay screensaver and Power Management if so.
# If you don't pass an argument, the checks are done every minute.

# Select the programs to be checked
vlc_detection=1
brave_browser_detection=1
steam_detection=1
audio_detection=1

# 1 min default
delay=1

# realdisp
realdisp=$(echo "$DISPLAY" | cut -d. -f1)

inhibitfile="/tmp/lightsoninhibit-$UID-$realdisp"
pidfile="/tmp/lightson-$UID-$realdisp.pid"

# YOU SHOULD NOT NEED TO MODIFY ANYTHING BELOW THIS LINE
die() {
  echo "$@" >&2
  exit 1
}

pidcreate() {
  # just one instance can run simultaneously
  if [ ! -e "$pidfile" ]; then
    echo "$$" >"$pidfile"
  else
    if [ -d "/proc/$(cat "$pidfile")" ]; then
      die "Another instance is running, abort!"
    else
      echo "$$" >"$pidfile"
    fi
  fi
}

pidremove() {
  if [ ! -e "$pidfile" ]; then
    echo "Error: missing pidfile" >&2
  elif [ ! -f "$pidfile" ]; then
    echo -e "Error: \"$pidfile\" is not a file\n" >&2
  else
    if [ "$(cat "$pidfile")" != "$$" ]; then
      die "Another instance is running, abort!"
    else
      rm -f "$pidfile"
    fi
  fi
  exit 0
}

pidcreate
trap "pidremove" EXIT

# Enumerate all the attached screens
displays=""
while read id; do
  displays="$displays $id"
done < <(xvinfo | sed -n 's/^screen #\([0-9]\+\)$/\1/p')

# only xscreensaver
screensaver="xscreensaver"

checkFullscreen() {
  # loop through every display looking for a fullscreen window
  for display in $displays; do
    # get id of active window and clean output
    active_win_id=$(DISPLAY=$realdisp.${display} xprop -root _NET_ACTIVE_WINDOW)
    active_win_id=${active_win_id##*# }
    active_win_id=${active_win_id:0:9} # eliminate potentially trailing spaces

    top_win_id=$(DISPLAY=$realdisp.${display} xprop -root _NET_CLIENT_LIST_STACKING)
    top_win_id=${active_win_id##*, }
    top_win_id=${top_win_id:0:9} # eliminate potentially trailing spaces

    # Check if Active Window (the foremost window) is in fullscreen state
    if [ ${#active_win_id} -ge 3 ]; then
      isActiveWinFullscreen=$(DISPLAY=$realdisp.${display} xprop -id $active_win_id | grep _NET_WM_STATE_FULLSCREEN)
    else
      isActiveWinFullscreen=""
    fi
    if [ ${#top_win_id} -ge 3 ]; then
      isTopWinFullscreen=$(DISPLAY=$realdisp.${display} xprop -id $top_win_id | grep _NET_WM_STATE_FULLSCREEN)
    else
      isTopWinFullscreen=""
    fi

    if [ -n "$window_name" ]; then
      isNamedFullscreen=$(DISPLAY=$realdisp.${display} xprop -name "$window_name" | grep _NET_WM_STATE_FULLSCREEN)
    else
      isNamedFulscreen=""
    fi

    if [[ "$isActiveWinFullscreen" = *NET_WM_STATE_FULLSCREEN* ]] || [[ "$isTopWinFullscreen" = *NET_WM_STATE_FULLSCREEN* ]]; then
      isAppRunning && delayScreensaver
    fi

    # If we are detecting by named application, then we need to detect if any audio is playing.
    # Detecting by name is used for multiple monitors where the video might be playing, but
    # not in focus.
    if [[ "$isNamedFullscreen" = *NET_WM_STATE_FULLSCREEN* ]]; then
      checkAudioPlaying && delayScreensaver
    fi
  done
}

# Check if active window is mplayer, vlc or firefox
# Then change IFs to detect more specifically the apps "<vlc>" and if process name exist

isAppRunning() {
  # Get title of active window
  active_win_title=$(xprop -id $active_win_id | grep "WM_CLASS(STRING)" | sed 's/^.*", //;s/"//g')

  case "$active_win_title" in
  *[Bb]rave*)
    [ $brave_browser_detection = 1 ] &&
      [ $(pgrep -c brave-browser) -ge 1 ] &&
      checkAudio "brave" &&
      return 0
    ;;
  *vlc* | *VLC*)
    [ $vlc_detection = 1 ] &&
      [ $(pgrep -c vlc) -ge 1 ] &&
      checkAudio vlc &&
      return 0
    ;;
  *steam*)
    [ $steam_detection = 1 ] &&
      [ $(pgrep -c steam) -ge 1 ] &&
      return 0
    ;;
  esac

  false
}

checkAudioPlaying() {
  # Check if any application is playing sounds in pulse
  # This is useful if your application keeps the stream in pulse open
  # but, lists it as CORKED for example.
  # It's also useful if you watch videos on multiple monitors and might not
  # have the video in focus.
  [ $audio_detection = 0 ] && return 0
  pacmd list-sink-inputs | grep -Eiq "RUNNING"
}

checkAudio() {
  # Check if application is streaming sound to PulseAudio
  [ $audio_detection = 0 ] && return 0
  pacmd list-sink-inputs | grep -Eiq "application.name = .*$1.*"
}

delayScreensaver() {
  # Reset inactivity time counter so screensaver is not started
  xscreensaver-command -deactivate >/dev/null

  # Check if DPMS is on. If it is, deactivate and reactivate again. If it is not, do nothing.
  dpmsStatus=$(xset -q | grep -c 'DPMS is Enabled')
  [ "$dpmsStatus" = 1 ] && xset -dpms && xset dpms
}

help() {
  echo "USAGE:    $ lighsonplus [FLAG1 ARG1] ... [FLAGn ARGn]"
  echo "FLAGS (ARGUMENTS must be 0 or 1, except stated otherwise):"
  echo ""
  echo "  -d,  --delay             Time interval in minutes, default is 1 min"
}

checkBool() {
  [ -n "$2" ] && [[ $2 = [01] ]] ||
    die "Invalid argument. 0 or 1 expected after \"$1\" flag."
}

while [ -n "$1" ]; do
  case $1 in
  "-d" | "--delay")
    [[ -z "$2" || "$2" = *[^0-9]* ]] &&
      die "Invalid argument. Time in minutes expected after \"$1\" flag. Got \"$2\"" ||
      delay=$2
    ;;
  "-h" | "--help")
    help && exit 0
    ;;
  *)
    die "Invalid argument. See -h, --help for more information."
    ;;
  esac

  # Arguments must always be passed in tuples
  shift 2
done

# Convert delay to seconds. We substract 10 for assurance.
delay=$((delay * 60 - 10))
echo "Start lightson+ mainloop"
while true; do
  [ -f "$inhibitfile" ] && delayScreensaver || checkFullscreen
  sleep $delay
done

exit 0
